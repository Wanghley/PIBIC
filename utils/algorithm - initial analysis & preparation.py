# -*- coding: utf-8 -*-
"""Analysis and data processing - collection 2018

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nWrbHUBR2PQ52lEVpN8UMqDZM46U7VPE

Work based in collected data by professor @oliveirafhm (Fábio Henrique Monteiro Oliveira) in his doctorate in 2018

### Dataset getter and preparation
"""

# Code to read csv file into Colaboratory:!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# link='https://drive.google.com/open?id=14Pi6FUcA7dfHnC_xjnZnThcylriKv5ob' #aparecido 1
# link='https://drive.google.com/open?id=1FDtC_t9fTk5VNl5GtV4jjWqRsO9hSLaU' #aparecido 2
link='https://drive.google.com/open?id=1BiF5VuTdlhVAV6iLedSu1zgmkVQ6EjKD' #aparecido 3
# link='https://drive.google.com/open?id=18IznFROWv8NeqFf7MK46J8oY2vL4C-vu' #rubens 1
# link = 'https://drive.google.com/open?id=1lJHAoKPBO9spx3SIROgZlpRScDm50jhj' #rubens 2
# link = 'https://drive.google.com/open?id=1jPaExv_AuTNPJHD7x310uHr70AKQi_O-' #rubens 3

fluff, id = link.split('=')

downloaded = drive.CreateFile({'id':id})
patient = 'aparecido'#'rubens'
side = 'r'#'l'
ncollect = '03' 
downloaded.GetContentFile(patient+ncollect+side+'.csv')  
# Dataset is now stored in colab

import pandas as pd
import numpy as np

df_parkinsonian = pd.read_csv(patient+ncollect+side+'.csv')
df_parkinsonian.head()

df_parkinsonian.plot(kind='line',x='Time',y=['G1Y','PULSEB'])

df_parkinsonian.loc[df_parkinsonian['PULSEB']<2]

df_p_2 = df_parkinsonian.loc[df_parkinsonian['PULSEB']<2]

f = len(df_p_2)/50 # size/frequency in Hz to get the time
l = np.arange(0,f,(1/50)) #set a vector to be the counter of time starting in zero
len(l) #size of the vector
# precisão de duas casas

type(l)
l.tolist()
df_p_2.drop('Time',inplace=True,axis=1)
df_p_2['Time']=l.tolist()

df_parkinsonian = df_p_2

df_parkinsonian.plot(kind='line',x='Time',y=['G1Y','PULSEB'])

df_parkinsonian.plot(kind='line',x='Time',y=['G3Y','PULSEB'])

"""### Plotting important axis
- G1 refere-se ao giroscópio fixado no dorso da mão
"""

df_parkinsonian.plot(kind='line',x='Time',y=['G1Y','G1Z','PULSEB'])

"""## Audio Processing

### getting audio from my drive
"""

link_audio = 'https://drive.google.com/open?id=1JVnwDBMkQfYfEmxuIC3hlakZ6tpce9od'
fluf, id = link_audio.split('=')
downloaded = drive.CreateFile({'id':id})
downloaded.GetContentFile('experiment_beeps_between_act_50hz.wav')

import wave

spf=wave.open('experiment_beeps_between_act_50hz.wav')

#Extract data
signal = spf.readframes(-1)
signal = np.fromstring(signal,"Int16")
fr = spf.getframerate()

if spf.getnchannels() == 2:
    print("Just mono files")
    sys.exit(0)

fr

Time = np.linspace(0, len(signal) / fr, num=len(signal))

len(signal)

import matplotlib.pyplot as plt
plt.figure(1)
plt.title("Signal Wave...")
plt.plot(Time, signal)
plt.show()

signal_treated = []
for s in signal:
    if s<-500:
        signal_treated.append(0)
    else:
        signal_treated.append(np.nan)

import matplotlib.pyplot as plt
plt.figure(1)
plt.title("Signal Wave...")
plt.plot(Time, signal_treated)
plt.show()

"""### Audio signal segmentation & processing"""

# audio_signal = []
# value=34
# for i in np.arange(0,f,(1/50)):
#     if i==12:
#         audio_signal.append(150)
#     elif i==21:
#         audio_signal.append(150)
#     elif (i==value):
#         audio_signal.append(150)
#         value+=12.2
#     else:
#         audio_signal.append(0)

# import matplotlib.pyplot as plt

# plt.figure(1)
# plt.title("Signal Wave...")
# plt.plot(l, audio_signal)
# plt.show()

# len(audio_signal)

# df_parkinsonian.shape

df_audio = pd.DataFrame(data=signal_treated,columns=['audio_signal'])
df_audio.head()

len(df_parkinsonian.index)

len(signal_treated)

for i in range(0,150):
    signal_treated.insert(i,np.nan)

for i in range(0,np.abs(len(df_parkinsonian.index)-len(signal_treated))):
    signal_treated.append(np.nan)

len(signal_treated)

df_parkinsonian['audio_signal']=signal_treated

df_parkinsonian.head()

df_parkinsonian.plot(kind='line',x='Time',y=['G1Y','audio_signal'],figsize=(20,10))

"""# Final Result of Data Preparation
Final dataset plotting with slices of activities made by the subjects according to the article [HAND MOTION QUANTIFICATION USING NON-CONTACT CAPACITIVE SENSORS](https://www.researchgate.net/publication/314086406_HAND_MOTION_QUANTIFICATION_USING_NON-CONTACT_CAPACITIVE_SENSORS)
"""

# df_parkinsonian.plot(kind='line',x='Time',y=['G1Y'],figsize=(20,10),color=['k','r'],xlim=[0,f])
# df_parkinsonian.plot(kins='scatter',x='Time',y='audio_signal')
from matplotlib.pyplot import figure

fig = plt.gcf()
fig.set_size_inches(20,10)
plt.plot(df_parkinsonian['Time'],df_parkinsonian['G1Y'])
plt.scatter(df_parkinsonian['Time'],df_parkinsonian['audio_signal'],color='r')
plt.show()

fig.savefig('graph_analysed_'+patient+ncollect+side+'.png', dpi=100)

df_parkinsonian.head()

df_parkinsonian.loc[df_parkinsonian['audio_signal']==0].shape

task_init_marker = df_parkinsonian.loc[df_parkinsonian['audio_signal']==0]

v = -1
reduced_markers = []
for i in task_init_marker.index:
    if (i-v)>100:
        reduced_markers.append(i)
    v=i
reduced_markers

for i in df_parkinsonian.index:
        if i not in reduced_markers:
            df_parkinsonian.loc[i,['audio_signal']]=np.nan

df_parkinsonian.loc[df_parkinsonian['audio_signal']==0].shape

df_parkinsonian.to_csv('/content/drive/My Drive/Projects/PIBIC - Estratégia para visualização de dados/Feature extraction/'+patient+'_'+ncollect+'_'+side+'.csv',index=False)

fig = plt.gcf()
fig.set_size_inches(20,10)
plt.plot(df_parkinsonian['Time'],df_parkinsonian['G1Y'])
plt.scatter(df_parkinsonian['Time'],df_parkinsonian['audio_signal'],color='r')
plt.show()